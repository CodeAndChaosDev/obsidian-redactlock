/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var v=(n,i)=>{for(var t in i)w(n,t,{get:i[t],enumerable:!0})},E=(n,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of D(i))!b.call(n,s)&&s!==t&&w(n,s,{get:()=>i[s],enumerable:!(e=k(i,s))||e.enumerable});return n};var H=n=>E(w({},"__esModule",{value:!0}),n);var P={};v(P,{default:()=>p});module.exports=H(P);var h=require("obsidian");var u=require("obsidian"),d=class extends u.Modal{constructor(t,e){super(t);this.onSubmit=e}onOpen(){let{contentEl:t}=this;t.createEl("h2",{text:"Enter Master Password"}),new u.Setting(t).setName("Password").addText(e=>e.setPlaceholder("Enter password").setValue("").onChange(s=>{})).addButton(e=>e.setButtonText("Submit").setCta().onClick(()=>{let s=t.querySelector("input");s instanceof HTMLInputElement&&(this.close(),this.onSubmit(s.value))}))}onClose(){this.contentEl.empty()}};var S={password:"letmein",useBlurStyle:!1,autoHide:!1,autoHideDelay:60};var o=require("obsidian"),g=class extends o.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"RedactLock Settings"}),new o.Setting(t).setName("Master Password").setDesc("Used to unlock all redacted content.").addText(e=>e.setPlaceholder("Enter password").setValue(this.plugin.settings.password).onChange(async s=>{this.plugin.settings.password=s,await this.plugin.saveSettings()})),new o.Setting(t).setName("Use Blur Style").setDesc("Blur text instead of replacing with \u2588 characters.").addToggle(e=>e.setValue(this.plugin.settings.useBlurStyle).onChange(async s=>{this.plugin.settings.useBlurStyle=s,await this.plugin.saveSettings()})),new o.Setting(t).setName("Auto-Hide Timeout").setDesc("Automatically re-redact text after being revealed.").addToggle(e=>e.setValue(this.plugin.settings.autoHide).onChange(async s=>{this.plugin.settings.autoHide=s,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.autoHide&&new o.Setting(t).setName("Auto-Hide Delay (seconds)").setDesc("How long text stays visible after unlocking.").addText(e=>e.setPlaceholder("60").setValue(this.plugin.settings.autoHideDelay.toString()).onChange(async s=>{let l=parseInt(s);isNaN(l)||(this.plugin.settings.autoHideDelay=l,await this.plugin.saveSettings())}))}};var p=class extends h.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new g(this.app,this)),this.registerMarkdownCodeBlockProcessor("redact",async(t,e,s)=>{let l=e.createDiv(),y=this.settings.useBlurStyle,f=this.settings.password,a=!0,r=l.createDiv();r.setText(t);let c=()=>{a?y?r.style.filter="blur(8px)":r.setText("\u2588".repeat(t.length)):(r.setText(t),r.style.filter="none")};c();let m=l.createEl("button",{text:a?"Unlock":"Redact"});m.onclick=async()=>{a?await new Promise(x=>{new d(this.app,T=>x(T)).open()})===f?(a=!1,c(),this.settings.autoHide&&setTimeout(()=>{a=!0,c(),m.setText("Unlock")},this.settings.autoHideDelay*1e3)):new h.Notice("Wrong password!"):(a=!0,c()),m.setText(a?"Unlock":"Redact")}})}async loadSettings(){this.settings=Object.assign({},S,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
